<!DOCTYPE html>
<html lang="en">
<head>
  <title>Proto21.com</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <style>
    /* Remove the navbar's default margin-bottom and rounded borders */
    .navbar {
      margin-bottom: 0;
      border-radius: 0;
    }

    /* Set height of the grid so .sidenav can be 100% (adjust as needed) */
    .row.content {height: 450px}

    /* Set gray background color and 100% height */
    .sidenav {
      padding-top: 20px;
      background-color: #f1f1f1;
      height: 100%;
    }

    /* Set black background color, white text and some padding */
    footer {
      background-color: #555;
      color: white;
      padding: 15px;
    }

    /* On small screens, set height to 'auto' for sidenav and grid */
    @media screen and (max-width: 767px) {
      .sidenav {
        height: auto;
        padding: 15px;

      }

      .row.content {height:auto;}
    }
    .stickyfooter {
            /*position: fixed;*/
            left: 0;
            bottom: 0;
            height: 100px;
            width: 100%;
            background-color: dimgray;
            color: white;
            text-align: right;
            padding-right: 50px;
            padding-top: 5px;
            font-size: large;
        }

        /*a:link {*/
            /*color: white;*/
        /*}*/

    .leftpanelphoto {

            }
  </style>
</head>


<body>

<nav class="navbar navbar-inverse">
  <div class="container-fluid">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <!--?<a class="navbar-brand" href="/">Logo</a>-->
        <a href="/" >
                     <img src="/images/Proto21_logo.jpg" alt="image" style="max-width:50%;height:auto;">
        </a>
    </div>
    <div class="collapse navbar-collapse" id="myNavbar">
      <!--?<ul class="nav navbar-nav">-->
        <!--?<li class="active"><a href="#">Home</a></li>-->
        <!--?<li><a href="#">About</a></li>-->
        <!--?<li><a href="#">Projects</a></li>-->
        <!--?<li><a href="#">Contact</a></li>-->
      <!--?</ul>-->
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/images/Proto21_logo.jpg">
            <!--?<span class="glyphicon glyphicon-log-in"></span> -->
            Login</a></li>
      </ul>
    </div>
  </div>
</nav>

<div class="container-fluid text-center">
  <div class="row content">
    <div class="col-sm-2 sidenav">
      <!--?<p><a href="#">Link</a></p>-->
      <!--?<p><a href="#">Link</a></p>-->
      <!--?<p><a href="#">Link</a></p>-->
    </div>
    <div class="col-sm-8 text-left">
          <h1>Python Web Development <span style="font-weight:bold; color:dodgerblue;  font-size: smaller">Logbook</span></h1>
          <p>Below are the steps required to include logging in your web application.</p>
          <hr>
        What you will need: <br>
        <ul style="list-style-type:none">
          <li>Your favorite text editor.</li>
          <li><a href="https://pypi.org/project/Logbook/">Logbook</a> - We'll use Logbook to test our new API endpoints.</li>
        </ul>

        <br>
        <p>
            In the prototype <a href="/pythonwebdevelopment">Python Web Development (basic)</a>, we created a RESTful API service.
This prototype will build on the work completed by adding logging to the project.
        </p>
        <br>
        <h3>Step 1: Clone the git project</h3>

        <code>
             $ git clone https://github.com/Durant21/DO_site2.git<br>
        </code>
        <br>

        change directory into the resulting project<br>
        <code>
            $ cd DO_site2<br>
        </code>

        Create a virtual env <br>
        <code>
            $ python3 -m venv --copies .env
        </code>
        <br>
        Activate the .env <br>
        <code>
            $ . .env/bin/activate
        </code>
        <br>
        Verify the location of the python library<br>
        <code>
        $ which python<br>
        /Users/dantefernandez/Projects/PythonScripts/Proto21_tests/DO_site2/.env/bin/python<br>
        </code>

        <br>
        Complete the installation of the Pyramid framework<br>
        <code>
        $ python setup.py develop<br>
        </code>

        <br>
        Run the application<br>
        <code>
            $ pserve development.ini<br>
            Starting server in PID 26688.<br>
            Serving on http://localhost:6543<br>
            Serving on http://localhost:6543<br>

        </code>
        <br><br>

        <h3>Step 2: Install the needed libraries</h3>

        Add pytest to the setup.py file.<br>
        <br>

        <br><br>
        Modify the <i>requires</i> list within setup.py file.<br>
        Add the following content:<br>

        <!--?https://www.w3schools.com/w3css/tryit.asp?filename=tryw3css_code_htmlhigh-->
        <div class="w3-panel w3-card w3-light-grey">
          <h4>setup.py</h4>
          <div class="w3-code htmlHigh notranslate">
                    requires=[<br>
                    'plaster_pastedeploy',<br>
                    'pyramid',<br>
                    'pyramid_chameleon',<br>
                    'pyramid_debugtoolbar',<br>
                    'waitress',<br>
                    <strong>'logbook'</strong>
                    ]<br>
          </div>
        </div>

        <br><br>

        Rerun file (Ctrl-C if the site is still runningâ€¦)<br>
        <code>
            $ python setup.py develop
        </code>

        <br><br>
        We should now see Logbook added to our project<br>
        <code>
            $ pip list
        </code>

        <br><br>
        <img src="/images/pipList1.jpg" alt="Picture Description" style="width:80%">

        <br><br>



        <h3>Step 3: Setup needed infrastructure</h3>

        <br>
        Create the file /infrastructure/<strong>logging.py</strong> and add the following<br>
        <div class="w3-panel w3-card w3-light-grey">
          <h4>logging.py</h4>
          <div class="w3-code htmlHigh notranslate">
                import logbook	<br>
                import sys<br><br>
                def global_init(logfile):<br>
                if logfile:<br>
                logbook.TimedRotatingFileHandler(<br>
                logfile, level=logbook.INFO, date_format='%Y-%m-%d').push_application()<br>
                else:<br>
                logbook.StreamHandler(sys.stdout, level=logbook.TRACE).push_application()<br>
            <br>
          </div>
        </div>
        <br><br>
        Your project structure should look like the following <br><br>
                <img src="/images/tree4.jpg" alt="Picture Description" style="width:80%">

        <br><br>

        <h3>Step 4: Set the development and production config settings</h3>
        <br>
        In our <i>development environment</i>, we'll leave the logbook_logfile name blank.
        At this setting, the logging function will write to console.
        <div class="w3-panel w3-card w3-light-grey">
          <h4>development.ini</h4>
          <div class="w3-code htmlHigh notranslate">
                [app:main]<br>
                use = egg:DO_site2<br><br>

                pyramid.reload_templates = true<br>
                pyramid.debug_authorization = false<br>
                pyramid.debug_notfound = false<br>
                pyramid.debug_routematch = false<br>
                pyramid.default_locale_name = en<br>
                pyramid.includes =pyramid_debugtoolbar<br>
                <strong>logbook_logfile =</strong><br>
            <br>
          </div>
        </div>
        <br>
        <br>
        In our <i>production environment</i>, we'll set the logbook_logfile name to <i>the_log_file.txt</i>.
        At this setting, the logging function will write to file.
        <br>
        <div class="w3-panel w3-card w3-light-grey">
          <h4>production.ini</h4>
          <div class="w3-code htmlHigh notranslate">
                [app:main]<br>
                use = egg:restful_auto_service<br><br>

                pyramid.reload_templates = false<br>
                pyramid.debug_authorization = false<br>
                pyramid.debug_notfound = false<br>
                pyramid.debug_routematch = false<br>
                pyramid.default_locale_name = en<br>
                <strong>logbook_logfile = the_log_file.txt</strong><br>
            <br>
          </div>
        </div>
        <br>



        <h3>Step 5: Modify the initialization process</h3>
        <br>
        We'll initialize logging by adding a call to the application's main().<br>
        <div class="w3-panel w3-card w3-light-grey">
          <h4>__init__.py</h4>
          <div class="w3-code htmlHigh notranslate">
                <strong>import logbook</strong><br><br>

                from pyramid.config import Configurator<br>
                <strong>import DO_site2.infrastructure.logging as logging</strong><br>

                def main(global_config, **settings):<br>
                    """ This function returns a Pyramid WSGI application.<br>
                    """<br>
                    config = Configurator(settings=settings)<br>
                    config.include('pyramid_chameleon')<br>
                    <strong>log = init_logging(config) </strong><br>
                    config.add_static_view('static', 'static', cache_max_age=3600)<br>
                    config.add_route('home', '/')<br>
                    config.scan()<br>
                    return config.make_wsgi_app()<br><br><br>


                <strong>def init_logging(config):<br>
                    settings = config.get_settings()<br>
                    logfile = settings.get('logbook_logfile')<br><br>

                    logging.global_init(logfile)<br>

                    log = logbook.Logger("App Startup")<br>
                    log.info("Configured logbook in {} mode with file '{}'.".format(<br>
                        'dev_mode' if not logfile else 'prod_mode',<br>
                        logfile<br>
                    ))
                <br>
                    return log</strong>
              <br><br>

          </div>
        </div>
        <br>

        <h3>Step 6: Run the application to create the first log entry</h3>
        <br>
        <code>
            $ pserve development.ini<br>
            Starting server in PID 26688.<br>
            Serving on http://localhost:6543<br>
            Serving on http://localhost:6543<br>
        </code>
        <br>

                <br><br>
        By running <i>$ pserve development.ini</i> we are running the app in development mode <br>
        where all log messages are written to console, as shown below<br>
                <img src="/images/logging1.jpg" alt="Picture Description" style="width:80%">

        <br><br>

        <h3>Step 7: Run the application in production-mode to demonstrate writing logs to a file.</h3>
        <br>
        <br>
        <code>
            $ pserve production.ini<br>
            Starting server in PID 26688.<br>
            Serving on http://localhost:6543<br>
            Serving on http://localhost:6543<br>
        </code>
        <br>
        <img src="/images/pserveProd1.jpg" alt="Picture Description" style="width:80%">
        <br>
        <br><br>
        By running <i>$ pserve production.ini</i> we are running the app in production mode <br>
        where all log messages are written to file.  In this example <i>the_log_file-2018-09-01.txt</i>, as shown below<br>
                <img src="/images/tree5.jpg" alt="Picture Description" style="width:80%">

        <br><br>
        A quick look inside the log file reveals the basic message sent to console while in development-mode, above.<br>
        <br>
                <img src="/images/logging2.jpg" alt="Picture Description" style="width:80%">
        <br><br>
        <!--?<h3>Extra:</h3><br>-->
            <!--?This is a very simple app without many instances where logging might be necessary.<br>-->
            <!--?More kinds of logging would include<br>-->
                <!--?â€¢ Critical<br>-->
                <!--?â€¢ Error<br>-->
                <!--?â€¢ Warning<br>-->
                <!--?â€¢ Notice<br>-->
                <!--?â€¢ Info<br>-->
            <!--?â€¢ Debug      <br>-->

        <br><br>


    </div>


    <div class="col-sm-2 sidenav">
      <!--?<div class="well">-->
        <!--?<p>ADS</p>-->
      <!--?</div>-->
      <!--?<div class="well">-->
        <!--?<p>ADS</p>-->
      <!--?</div>-->
    </div>
  </div>
</div>

<footer class="stickyfooter">
  <a href="about_author" style="color:white;">Dante Fernandez</a>
</footer>

</body>
</html>