<!DOCTYPE html>
<html lang="en">
<head>
  <title>Proto21.com</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <style>
    /* Remove the navbar's default margin-bottom and rounded borders */
    .navbar {
      margin-bottom: 0;
      border-radius: 0;
    }

    /* Set height of the grid so .sidenav can be 100% (adjust as needed) */
    .row.content {height: 450px}

    /* Set gray background color and 100% height */
    .sidenav {
      padding-top: 20px;
      background-color: #f1f1f1;
      height: 100%;
    }

    /* Set black background color, white text and some padding */
    footer {
      background-color: #555;
      color: white;
      padding: 15px;
    }

    /* On small screens, set height to 'auto' for sidenav and grid */
    @media screen and (max-width: 767px) {
      .sidenav {
        height: auto;
        padding: 15px;

      }

      .row.content {height:auto;}
    }
    .stickyfooter {
            /*position: fixed;*/
            left: 0;
            bottom: 0;
            height: 100px;
            width: 100%;
            background-color: dimgray;
            color: white;
            text-align: right;
            padding-right: 50px;
            padding-top: 5px;
            font-size: large;
        }

        /*a:link {*/
            /*color: white;*/
        /*}*/

    .leftpanelphoto {

            }
  </style>
</head>


<body>

<nav class="navbar navbar-inverse">
  <div class="container-fluid">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <!--?<a class="navbar-brand" href="/">Logo</a>-->
        <a href="/" >
                     <img src="/images/Proto21_logo.jpg" alt="image" style="max-width:50%;height:auto;">
        </a>
    </div>
    <div class="collapse navbar-collapse" id="myNavbar">
      <!--?<ul class="nav navbar-nav">-->
        <!--?<li class="active"><a href="#">Home</a></li>-->
        <!--?<li><a href="#">About</a></li>-->
        <!--?<li><a href="#">Projects</a></li>-->
        <!--?<li><a href="#">Contact</a></li>-->
      <!--?</ul>-->
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/images/Proto21_logo.jpg">
            <!--?<span class="glyphicon glyphicon-log-in"></span> -->
            Login</a></li>
      </ul>
    </div>
  </div>
</nav>

<div class="container-fluid text-center">
  <div class="row content">
    <div class="col-sm-2 sidenav">
      <!--?<p><a href="#">Link</a></p>-->
      <!--?<p><a href="#">Link</a></p>-->
      <!--?<p><a href="#">Link</a></p>-->
    </div>
    <div class="col-sm-8 text-left">
          <h1>Python Web Development <span style="font-weight:bold; color:dodgerblue;  font-size: smaller">Part 2</span></h1>
          <p>Below are the steps required for attaching a sqlite database to you python web application.</p>
          <hr>
        What you will need: <br>
        <ul style="list-style-type:none">
          <li>Your favorite text editor.</li>
          <li><a href="https://www.getpostman.com/">Postman</a> - We'll use Postman to test our new API endpoints.</li>
            <li><a href="https://www.sqlalchemy.org/">SQLAlchemy</a> - For simplicity, we'll use this object relational mapper (ORM) to handle communication
            between the python application and the database.</li>
        </ul>

        <br>
        <br>

In the <a href="restfulservices">part 1</a> of this exercise, we created a RESTful API service.<br>
This prototype will build on the work completed by attaching a backend database.<br>

<h3>Step 1  Add the needed files and classes</h3>
    <br>
Create a directory /db to hold our new database;<br>
Add a place-holder text file to help SQLAlchemy locate the folder.  Call it placeholder.txt;<br>

Within the directory /data, create a new python file called db_factory.py.  This file will contain methods for creating the database and establishing session objects needed for connecting the application to the database.<br>
Add the following code:<br>
        <!--?https://www.w3schools.com/w3css/tryit.asp?filename=tryw3css_code_htmlhigh-->
        <div class="w3-panel w3-card w3-light-grey">
          <h4>db_factory.py</h4>
          <div class="w3-code htmlHigh notranslate">
            import os<br>
            import DO_site2<br>
            import sqlalchemy<br>
            import sqlalchemy.orm<br><br>

            from DO_site2.data.sqlalchemy_base import SqlAlchemyBase<br><br><br>


            class DbSessionFactory:<br>
                __session_factory = None<br><br>

                @classmethod<br>
                def global_init(cls, db_filename):<br>
                    working_folder = os.path.dirname(DO_site2.__file__)<br>
                    file = os.path.join(working_folder, 'db', db_filename)<br>
                    conn_string = 'sqlite:///' + file<br><br>

                    # print("Connection string: " + conn_string)<br>
                    engine = sqlalchemy.create_engine(conn_string, echo=True)<br><br>

                    SqlAlchemyBase.metadata.create_all(engine)<br><br>

                    cls.__session_factory = sqlalchemy.orm.sessionmaker(bind=engine)<br><br>

                @classmethod<br>
                def create_session(cls):<br>
                    return cls.__session_factory() <br>
          </div>
        </div>
…..<br>


We will modify the methods within the file repository_people.py we created in an earlier exercise to pull data from the database instead of from the people.csv text file.<br>
Open the file repository_people.py and replace the existing code with the following:<br>
        <!--?https://www.w3schools.com/w3css/tryit.asp?filename=tryw3css_code_htmlhigh-->
        <div class="w3-panel w3-card w3-light-grey">
          <h4>repository_people.py</h4>
          <div class="w3-code htmlHigh notranslate">
                import csv<br>
                import os<br>
                import uuid<br><br>

                from proto21_home.data.db_factory import DbSessionFactory<br>
                from proto21_home.data.People import Person<br><br>

                class Repository_people:<br>
                    __people_data = {}<br><br>

                    @classmethod<br>
                    def all_people(cls, limit=None):<br><br>


                        session = DbSessionFactory.create_session()<br><br>

                        query = session.query(Person)  # .order_by(Teacher.lName)<br><br>

                        if limit:<br>
                            people = query[:limit]<br>
                        else:<br>
                            people = query.all()<br><br>

                        session.close()<br><br>

                        return people<br><br>


                    @classmethod<br>
                    def __load_data(cls):<br>
                        if cls.__people_data:<br>
                            return<br><br>

                        file = os.path.join(<br>
                            os.path.dirname(__file__),<br>
                            'people.csv'<br>
                        )<br><br>

                        with open(file, 'r', encoding='utf-8') as fin:<br>
                            # brand,name,price,year,damage,last_seen<br>
                            reader = csv.DictReader(fin)<br>
                            for row in reader:<br>
                                key = str(uuid.uuid4())<br>
                                row['id'] = key<br>
                                cls.__people_data[key] = row<br><br>
          </div>
        </div>
….<br>

Within the /db directory, create a python file called sqlalchemy_base.py.  Add the following code:<br>
        <!--?https://www.w3schools.com/w3css/tryit.asp?filename=tryw3css_code_htmlhigh-->
        <div class="w3-panel w3-card w3-light-grey">
          <h4>sqlalchemy_base.py</h4>
            <div class="w3-code htmlHigh notranslate">
                from sqlalchemy.ext.declarative import declarative_base<br><br>

                SqlAlchemyBase = declarative_base()<br>
            </div>
        </div>
….<br>

We need to create a "people" data class.  Within the /db directory, create a python file called People.py.<br>
Add the following code:<br>
        <!--?https://www.w3schools.com/w3css/tryit.asp?filename=tryw3css_code_htmlhigh-->
        <div class="w3-panel w3-card w3-light-grey">
          <h4>People.py</h4>
          <div class="w3-code htmlHigh notranslate">
                import uuid<br>

                import sqlalchemy<br>
                import datetime<br><br>

                from proto21_home.data.sqlalchemy_base import SqlAlchemyBase<br>v


                class Person(SqlAlchemyBase):<br>

                    __tablename__ = 'People'<br>

                    # columns: fname, lname, title, position, company, email, url1, url2, address, city, state, date_edited<br>

                    id = sqlalchemy.Column(sqlalchemy.String, primary_key=True,<br>
                                           default=lambda: str(uuid.uuid4()))<br>
                    fname = sqlalchemy.Column(sqlalchemy.String, nullable=False)<br>
                    lname = sqlalchemy.Column(sqlalchemy.String, nullable=False)<br>
                    title = sqlalchemy.Column(sqlalchemy.String)<br>
                    position = sqlalchemy.Column(sqlalchemy.String)<br>
                    company = sqlalchemy.Column( sqlalchemy.String )<br>
                    description = sqlalchemy.Column(sqlalchemy.String)<br>
                    email = sqlalchemy.Column(sqlalchemy.String)<br>
                    url1 = sqlalchemy.Column(sqlalchemy.String)<br>
                    url2 = sqlalchemy.Column(sqlalchemy.String)<br>
                    address = sqlalchemy.Column(sqlalchemy.String)<br>
                    city = sqlalchemy.Column(sqlalchemy.String)<br>
                    state = sqlalchemy.Column(sqlalchemy.String)<br>
                    img1 = sqlalchemy.Column( sqlalchemy.String )<br>
                    date_created = sqlalchemy.Column(sqlalchemy.DateTime, index=True,<br>
                                                  default=datetime.datetime.now)<br>

                    def to_dict(self):<br>
                        return {<br>
                            'fname': self.fname,<br>
                            'lname': self.lname,<br>
                            'title': self.title,<br>
                            'position': self.position,<br>
                            'company': self.company,<br>
                            'description': self.description,<br>
                            'email': self.email,<br>
                            'url1': self.url1,<br>
                            'url2': self.url2,<br>
                            'address': self.address,<br>
                            'city': self.city,<br>
                            'state': self.state,<br>
                            'img1': self.img1,<br>
                            'date_created': self.date_created.isoformat(),<br>
                            'id': self.id,<br>
                        }


          </div>
        </div>
….<br>

Modify the contents of the __init__.py file as described, below (new code in bold)<br>
        <!--?https://www.w3schools.com/w3css/tryit.asp?filename=tryw3css_code_htmlhigh-->
        <div class="w3-panel w3-card w3-light-grey">
          <h4>__init__.py</h4>
          <div class="w3-code htmlHigh notranslate">
                from pyramid.config import Configurator<br>
              <strong>
              from pyramid.events import NewRequest<br><br>

                from pyramid.renderers import JSON<br><br>

                # Following references needed for Sqlite creation<br>
                from DO_site2.data.People import Person<br>
                from DO_site2.data.db_factory import DbSessionFactory<br>
                from DO_site2.data.repository import Repository<br><br>
                </strong>

                def main(global_config, **settings):<br><br>
                    """ This function returns a Pyramid WSGI application.<br>
                    """<br>
                    config = Configurator(settings=settings)<br>
                    config.include('pyramid_chameleon')<br><br>

                    <strong>init_db( config )</strong><br><br>

                    config.add_static_view('static', 'static', cache_max_age=3600)<br>
                    config.add_route('home', '/')<br>v

                    # register_routes( config )
<br>
                    config.add_route( 'people_api', '/api/people' )<br><br>

                    config.scan()<br>
                    return config.make_wsgi_app()<br><br>

              <strong>
                def init_db(config):<br>
                    settings = config.get_settings()<br>
                    db_file = settings.get('db_filename')<br><br>

                    DbSessionFactory.global_init(db_file)<br>
                  </strong>
          </div>
        </div>
….<br>
<br>

<h3>Step 2  Modify the Pyramid configuration files</h3>
<br>
The Pyramid web framework requires a few modifications to the configuration files for SqlAlchemy to work.<br>
Within setup.py, add 'sqlalchemy' to the list required libraries, as shown below:<br>
        <!--?https://www.w3schools.com/w3css/tryit.asp?filename=tryw3css_code_htmlhigh-->
        <div class="w3-panel w3-card w3-light-grey">
          <h4>setup.py</h4>
          <div class="w3-code htmlHigh notranslate"><br>
                requires = [<br>
                    'plaster_pastedeploy',<br>
                    'pyramid',<br>
                    'pyramid_chameleon',<br>
                    'pyramid_debugtoolbar',<br>
                    'waitress'<strong>,<br>
                    'requests',<br>
                    'python-dateutil',<br>
                  'sqlalchemy'<br></strong>
                ]<br>
          </div>
        </div>
…..<br><br>

Within development.ini, add the following variables to define the name and location of the new database:<br>
        <!--?https://www.w3schools.com/w3css/tryit.asp?filename=tryw3css_code_htmlhigh-->
        <div class="w3-panel w3-card w3-light-grey">
          <h4>development.ini</h4>
          <div class="w3-code htmlHigh notranslate">
                [app:main]<br>
                use = egg:DO_site2<br><br>

                pyramid.reload_templates = true<br>
                pyramid.debug_authorization = false<br>
                pyramid.debug_notfound = false<br>
                pyramid.debug_routematch = false<br>
                pyramid.default_locale_name = en<br>
                pyramid.includes =<br>
                    pyramid_debugtoolbar<br>
              <strong>
                db_filename = sampleDB.sqlite
                db_path = /Users/dantefernandez/Projects/Proto21/webapps/proto21_home/proto21_home/db
                img_path = /Users/dantefernandez/Projects/Proto21/webapps/proto21_home/proto21_home/static
                  </strong>
              <br>
          </div>
        </div>
….<br><br>

        This application will eventually be moved into a production setting.
        At that point, we will modify the production.ini file to reflect the production environment's file structure.<br>
        <!--?https://www.w3schools.com/w3css/tryit.asp?filename=tryw3css_code_htmlhigh-->
        <div class="w3-panel w3-card w3-light-grey">
          <h4>production.ini</h4>
          <div class="w3-code htmlHigh notranslate">
                [app:main]<br>
                use = egg:proto21_home<br><br>

                pyramid.reload_templates = false<br>
                pyramid.debug_authorization = false<br>
                pyramid.debug_notfound = false<br>
                pyramid.debug_routematch = false<br>
                pyramid.default_locale_name = en<br>
              <strong>
              db_filename = sampleDB.sqlite<br>
                db_path = /webapps/proto21/p21Home/webapps/proto21_home/proto21_home/db<br>
                img_path = /webapps/proto21/p21Home/webapps/proto21_home/proto21_home/static<br><br>
              </strong>
          </div>
        </div>
….<br><br>

        <h3>Step 3  Create the database</h3>
<br>
On execution of the app, SQLAchemy will create the database if it doesn't already exist.
        <br>
<br><br>

<h3>Step 4  Test the new configuration</h3>
<br>
As in part 1 of this prototype, we can use Postman to call our API<br>
        <br>
        From the cmd line, run the app.<br>
        <code>
            $ pserve development.ini<br>
            Starting server in PID 26688.<br>
            Serving on http://localhost:6543<br>
            Serving on http://localhost:6543<br>
        </code>
        <br><br>
        With the application running, open Postman and create a GET call using the URL <font color="blue"> http://localhost:6543/api/people</font><br>
        When you click Send, the results should be as shown, below.<br>

                <div>
                    <img src="/images/postman_get_people1.jpg" alt="Picture Description" style="width:80%">
                </div>

                <br><br>
                The bottom panel should reflect the information you added to the people.csv file in the above step. <br>

                <br><br>
        <br><br>



    </div>


    <div class="col-sm-2 sidenav">
      <!--?<div class="well">-->
        <!--?<p>ADS</p>-->
      <!--?</div>-->
      <!--?<div class="well">-->
        <!--?<p>ADS</p>-->
      <!--?</div>-->
    </div>
  </div>
</div>

<footer class="stickyfooter">
  <a href="about_author" style="color:white;">Dante Fernandez</a>
</footer>

</body>
</html>